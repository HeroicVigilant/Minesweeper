#include "pch.h"
#include <array>
#include <iostream>
#include <iomanip>
#include <time.h>
#include <cstring>
#include <string>
#include <windows.h>
using namespace std;

const int ROWS = 10;
const int COLS = 10;

void mineSweeper();
void theIntro();
void replayGame();
char update_field(int uboard[ROWS][COLS]);
int revealBoard(int a, int b, int ufield[ROWS][COLS], int reveal[ROWS][COLS]);
int getInput(bool& flag, char& a, char& b, int numMarks, int uboard[ROWS][COLS]);
int firstMove(bool& flag, char& a, char& b, int numMarks, int uboard[ROWS][COLS], int reveal[ROWS][COLS]);
int placeMines(int reveal[ROWS][COLS]);


int main()
{
	theIntro();
	mineSweeper();
}

void mineSweeper() {
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
	system("CLS");
	bool firstMark = false;
	char firsta = 12, firstb = 0;
	int reveal[COLS][ROWS], uboard[COLS][ROWS];
	int gameOver = 0, numMarks = 10;
	srand(static_cast<unsigned int>(time(0)));
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			reveal[i][j] = 0;
			uboard[i][j] = 120;
		}
	}
	update_field(uboard); //beginning field
	placeMines(reveal);
	firstMove(firstMark, firsta, firstb, numMarks, uboard, reveal);
	//int moveIndex = 0;
	while (gameOver != 9) {
		char row = 0, col = 0;
		bool mark = 0;
		int victory = 0, d = 0;
		getInput(mark, row, col, numMarks, uboard);
	/*	if (moveIndex == 0)
		{
			int x = row;
			int y = col;
			if (isMine(x, y, reveal) = true)
				replaceMine(x, y, reveal);

				
		}*/

		if (mark == true) {     //If mark returns true, go through the marking process. 
			if (uboard[row][col] != 120 && uboard[row][col] != 77) {
				mark = false;

			}
			else if (uboard[row][col] == (char)77) {
				uboard[row][col] = 120;
				numMarks++;
			}
			else if (numMarks == 0) {
				mark = false;
			}
			else {
				uboard[row][col] = 77;
				numMarks--;
			}
		}
		else { //if mark is false, reveal the space. 

			uboard[row][col] = reveal[row][col];
			revealBoard(row, col, uboard, reveal);
		}
		if (numMarks == 0) {   //This will calculate if you win or not when you reach 0 marks left. 
			for (int i = 0; i < 10; i++)
				for (int j = 0; j < 10; j++) {
					if (reveal[i][j] == 9)
						if (uboard[i][j] == 77)
							victory++;
				}

		}
		if (victory == 10) {
			cout << "You win!" << endl;
			replayGame();
		}
		gameOver = uboard[row][col]; //Lose condition here. 
		update_field(uboard);
	}

	if (gameOver == 9) {
		if (gameOver == 9) {		//Shows position of all mines if you lose. 
			for (int i = 0; i < 10; i++)
				for (int j = 0; j < 10; j++)
					if (reveal[i][j] == 9)
						uboard[i][j] = 9;
			update_field(uboard);
		}
		cout << "You hit a mine :( Game Over!" << endl;
		replayGame();
	}
}

int placeMines(int reveal[ROWS][COLS]) {
	for (int i = 0; i < 10; ++i) {     //mines created here, mines will equal 9. 
		int a = rand() % 10;
		int b = rand() % 10;
		if (reveal[a][b] == 9) {   //If an element already equals 9, subtract one from i 
			--i;				  //so that we don't get duplicates. Else assign 9 to the element. 
		}
		else {
			reveal[a][b] = 9;			//Assigns 1-8 to elements based on how many mines are adjacent. 
			if (a < 9 && reveal[a + 1][b] != 9) {
				reveal[a + 1][b]++;
			}
			if (a > 0 && reveal[a - 1][b] != 9) {
				reveal[a - 1][b]++;
			}
			if (b < 9 && reveal[a][b + 1] != 9) {
				reveal[a][b + 1]++;
			}
			if (b > 0 && reveal[a][b - 1] != 9) {
				reveal[a][b - 1]++;
			}
			if (a > 0 && b > 0 && reveal[a - 1][b - 1] != 9) {
				reveal[a - 1][b - 1]++;
			}
			if (a < 9 && b < 9 && reveal[a + 1][b + 1] != 9) {
				reveal[a + 1][b + 1]++;
			}
			if (a < 9 && b > 0 && reveal[a + 1][b - 1] != 9) {
				reveal[a + 1][b - 1]++;
			}
			if (a > 0 && b < 9 && reveal[a - 1][b + 1] != 9) {
				reveal[a - 1][b + 1]++;
			}
		}
	}
	return reveal[ROWS][COLS];
}

/*
void replaceMine(int row, int col, int board[ROWS][COLS])
{
	for (int i = 0; i < ROWS; i++)
	{
		for (int j = 0; j < ROWS; j++)
		{
			if (board[i][j] != ':(')
			{
				board[i][j] = ':(';
				board[row][col] = 'X';
				return;
			}
		}
	}
}*/

/*bool isMine(int row, int col, int reveal[ROWS][COLS])
{
	if (reveal[row][col] == ':(')
	{
		return (true);
	}
	else
		return (false);
}*/

char update_field(int uboard[ROWS][COLS]) {
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
	system("CLS");
	SetConsoleTextAttribute(h, 3);
	cout << setw(11) << endl;
	for (int a = 0; a < 10; a++) {
		cout << a;
		if (a < 9) {
			cout << setw(11);
		}
	}
	cout << endl << endl << "A";

	for (int i = 0; i < ROWS; i++) {
		for (int j = 0; j < COLS; j++) {
			if (uboard[i][j] == 120) {
				SetConsoleTextAttribute(h, 3);
				cout << setw(10) << (char)120 << " ";
			}
			else if (uboard[i][j] == 77) {
				SetConsoleTextAttribute(h, 6);
				cout << setw(10) << (char)77 << " ";
			}
			else if (uboard[i][j] == 0) {
				SetConsoleTextAttribute(h, 3);
				cout << setw(10) << " " << " ";
			}
			else if (uboard[i][j] == 9) {
				SetConsoleTextAttribute(h, 12);
				cout << setw(10) << ":(" << " ";
			}
			else {
				SetConsoleTextAttribute(h, 13);
				cout << setw(10) << (uboard[i][j]) << " ";
			}
		}
		SetConsoleTextAttribute(h, 3);
		int b = 0;
		if (i < 9) {
			b = 66 + i;
		}
		else {
			b = 0;
		}
		cout << endl << endl << (char)b;
	}

	return uboard[COLS][ROWS];
}

int revealBoard(int a, int b, int uboard[ROWS][COLS], int reveal[ROWS][COLS]) {
	int tempa = a, tempb = b;
	while (reveal[a + 1][b] != 9 && a < 9 && uboard[a + 1][b] != (char)77) {
		uboard[a + 1][b] = reveal[a + 1][b];
		a++;

	}
	a = tempa;
	b = tempb;
	while (reveal[a - 1][b] != 9 && a > 0 && uboard[a - 1][b] != (char)77) {
		uboard[a - 1][b] = reveal[a - 1][b];
		a--;

	}
	a = tempa;
	b = tempb;
	while (reveal[a][b + 1] != 9 && b < 9 && uboard[a][b + 1] != (char)77) {
		uboard[a][b + 1] = reveal[a][b + 1];
		b++;

	}
	a = tempa;
	b = tempb;
	while (reveal[a][b - 1] != 9 && b > 0 && uboard[a][b - 1] != (char)77) {
		uboard[a][b - 1] = reveal[a][b - 1];
		b--;

	}
	a = tempa;
	b = tempb;
	while (reveal[a - 1][b - 1] != 9 && b > 0 && a > 0 && uboard[a - 1][b - 1] != (char)77) {
		uboard[a - 1][b - 1] = reveal[a - 1][b - 1];
		a--;
		b--;

	}
	a = tempa;
	b = tempb;
	while (reveal[a + 1][b + 1] != 9 && b < 9 && a < 9 && uboard[a + 1][b + 1] != (char)77) {
		uboard[a + 1][b + 1] = reveal[a + 1][b + 1];
		a++;
		b++;

	}
	a = tempa;
	b = tempb;
	while (reveal[a + 1][b - 1] != 9 && a < 9 && b > 0 && uboard[a + 1][b - 1] != (char)77) {
		uboard[a + 1][b - 1] = reveal[a + 1][b - 1];
		a++;
		b--;

	}
	a = tempa;
	b = tempb;
	while (reveal[a - 1][b + 1] != 9 && b < 9 && a > 0 && uboard[a - 1][b + 1] != (char)77) {
		uboard[a - 1][b + 1] = reveal[a - 1][b + 1];
		a--;
		b++;

	}
	return uboard[ROWS][COLS];
}

void theIntro() {
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(h, 3);
	cout << setw(68) << "Welcome to Minesweeper!" << endl;
	cout << setw(68) << "_______________________" << endl << endl;
	cout << setw(104) << "The objective of this game is quite simple. You must find the 10 mines located randomly" << endl;
	cout << setw(105) << "in the playing field and mark them by pressing M before you're selection. If you mark all" << endl;
	cout << setw(105) << "10 mines you win. If your selection without a mark is ever a mine, you lose. The numbers" << endl;
	cout << setw(90) << "labeled 1-8 indicate how many ajacent spaces have mines." << endl << endl;
	cout << setw(95) << "Would you like to play? Press 'y' to play or press any button to exit: ";
	string input;
	cin >> input;
	if (input.length() == 1) {
		char a;
		a = input[0];
		if (a == 'y' || a == 'Y') {
			return;
		}
		else {
			exit(1);
		}
	}
	else
		exit(1);
}

int firstMove(bool& flag, char& a, char& b, int numMarks, int uboard[ROWS][COLS], int reveal[ROWS][COLS]) {
	while (flag == true) {     //If mark returns true, go through the marking process. 
		if (uboard[a][b] != 120 && uboard[a][b] != 77) {
			flag = false;

		}
		else if (uboard[a][b] == (char)77) {
			uboard[a][b] = 120;
			numMarks++;
			flag = false;
		}
		else if (numMarks == 0) {
			flag = false;
		}
		else {
			uboard[a][b] = 77;
			numMarks--;
			update_field(uboard);
			flag = false;
		}
	}
	if (reveal[a][b] == 9) {
		if (a < 9 && reveal[a + 1][b] != 9) {
			reveal[a + 1][b]--;
		}
		if (a > 0 && reveal[a - 1][b] != 9) {
			reveal[a - 1][b]--;
		}
		if (b < 9 && reveal[a][b + 1] != 9) {
			reveal[a][b + 1]--;
		}
		if (b > 0 && reveal[a][b - 1] != 9) {
			reveal[a][b - 1]--;
		}
		if (a > 0 && b > 0 && reveal[a - 1][b - 1] != 9) {
			reveal[a - 1][b - 1]--;
		}
		if (a < 9 && b < 9 && reveal[a + 1][b + 1] != 9) {
			reveal[a + 1][b + 1]--;
		}
		if (a < 9 && b > 0 && reveal[a + 1][b - 1] != 9) {
			reveal[a + 1][b - 1]--;
		}
		if (a > 0 && b < 9 && reveal[a - 1][b + 1] != 9) {
			reveal[a - 1][b + 1]--;
		}
		int a = rand() % 10;
		int b = rand() % 10;
		while (reveal[a][b] == 9) {
			a = rand() % 10;
			b = rand() % 10;
		}
		if (reveal[a][b] != 9) {
			reveal[a][b] = 9;			//Assigns 1-8 to elements based on how many mines are adjacent. 
			if (a < 9 && reveal[a + 1][b] != 9) {
				reveal[a + 1][b]++;
			}
			if (a > 0 && reveal[a - 1][b] != 9) {
				reveal[a - 1][b]++;
			}
			if (b < 9 && reveal[a][b + 1] != 9) {
				reveal[a][b + 1]++;
			}
			if (b > 0 && reveal[a][b - 1] != 9) {
				reveal[a][b - 1]++;
			}
			if (a > 0 && b > 0 && reveal[a - 1][b - 1] != 9) {
				reveal[a - 1][b - 1]++;
			}
			if (a < 9 && b < 9 && reveal[a + 1][b + 1] != 9) {
				reveal[a + 1][b + 1]++;
			}
			if (a < 9 && b > 0 && reveal[a + 1][b - 1] != 9) {
				reveal[a + 1][b - 1]++;
			}
			if (a > 0 && b < 9 && reveal[a - 1][b + 1] != 9) {
				reveal[a - 1][b + 1]++;
			}
		}

		else { //if mark is false, reveal the space. 
			reveal[a][b] = 0;
			uboard[a][b] = reveal[a][b];
			revealBoard(a, b, uboard, reveal);

		}

		update_field(uboard);
		return flag, a, b, numMarks, uboard[a][b], reveal[a][b];
	}
}


int getInput(bool& mark, char &a, char &b, int numMarks, int uboard[ROWS][COLS]) {
	cout << setw(76);
	cout << "To reset the board type 'r'\n";
	cout << setw(75);
	cout << "To quit the round type 'q'\n";
	cout << setw(65);
	cout << "Marks: " << numMarks << endl;
	cout << setw(85);
	cout << "Enter a coordinate (Put M infront to mark): ";
	string d, e;
	char c;
	cin >> c;

	if (c == 'M' || c == 'm') { //checks if they want to mark
		mark = true;  //sets mark to true if they want to Mark
		cin >> d;
	}
	else if (c == 'R' || c == 'r')
	{
		system("CLS");
		mineSweeper();
	}
	else if (c == 'Q' || c == 'q')
	{
		system("pause");
		exit(1);
	}
	else {
		cin.putback(c);
		cin.clear();
		cin >> d;
	}
	while (d.length() != 2) {   //if string has more or less than one char it will do the loop. 
		update_field(uboard);
		cout << setw(69) << "Invalid Input." << endl;
		cin.clear();
		cout << setw(76);
		cout << "To reset the board type 'r'\n";
		cout << setw(75);
		cout << "To quit the round type 'q'\n";
		cout << setw(65);
		cout << "Marks: " << numMarks << endl;
		cout << setw(85);
		cout << "Enter a coordinate (Put M infront to mark): ";
		/*if (mark = true) {
			cout << "M";
		}*/
		cin >> c;
	
		if (c == 'R' || c == 'r')
		{
			system("CLS");
			mineSweeper();
		}
		else if (c == 'Q' || c == 'q')
		{
			system("pause");
			exit(1);
		}
	}
	a = d[0];
	b = d[1];
	
	if ((char)a >= 97 && (char)a <= 106) {
		a = d[0] - 32;
	}
	while (!isalpha(a) || (char)a < 65 || (char)a > 75) {
		cout << setw(72) << "Invalid input." << endl;
		update_field(uboard);
		getInput(mark, a, b, numMarks, uboard);
	}
	while (!isdigit(b) || b > 57 || b < 48) {
		if (e.length() != 1) {
			cout << setw(80) << "Invalid input. Enter something else  ";
			cin >> e;
		}
		else {
			cout << setw(80) << "Invalid input. Please enter a number: ";
			cin >> e;
		}
		b = e[0];
	}
	a = a - 65;
	b = b - 48;
	return mark, a, b, numMarks;
}

void replayGame() {
	cout << "Would you like to play again? Press y/n" << endl;
	string input;
	cin >> input;
	if (input.length() == 1) {
		char a = input[0];
		switch (a) {
		case 'y':
			mineSweeper();
			break;
		case 'n':
			exit(1);
		default:
			cout << "Invalid answer." << endl;
			replayGame();
		}
	}
	else {
		cout << "Invalid answer." << endl;
		replayGame();
	}
}
